#include<iostream>
#include<math.h>
using namespace std;


int main()
{   long long  n,m,a[100009],b[400];
    long long i,j,x,y,flag,root,max[400],m_max,q,x1,y1,block_x,block_y,start,end,sum;
	
    
    cin>>n;
    sum=0;
    for(i=0;i<n;i++)
    {
        cin>>a[i];
    }
    
        //pre-computations starts here
        //using square root decompisition
        root=sqrt(n);
        q=root;
        if(n==2)
        {   root=2;
            b[0]=0;
            b[1]=1;
            max[0]=a[0];
            max[1]=a[1];
        }
        else
        {
        if(n==3)
        {   root=2;
            q=1;
        }
        
        
       
        j=0;
    
        for(i=0;i<(root-1);i++) //moving boundaries (root-1)
        {   b[j]=q;
            q+=q;
            j++;
        }
           
        b[root-1]=n-1;
        start=0;
        for(i=0;i<=(root-1);i++)
        {   end=b[i];
            m_max=a[start];
            for(j=start;j<end;j++)
            {   
                if(a[j]>m_max)
                m_max=a[j];
            }
            start=end;
            max[i]=m_max;
            
            
        }
        if(max[root-1]<a[end])
        max[root-1]=a[end];
        }
        //for(i=0;i<root;i++)
        //cout<<b[i]<<endl;
        //pre-computations done!!
      
        
    cin>>m;
    cin>>x;
    cin>>y;
    flag=0;
    
    while(m)
    {
        m--;
        if(flag!=0)
        {
            x=(x+7)%(n-1);
            y=(y+11)%n;
        }
        flag=1;
        if(x==y)
        m_max=a[x];
        
        else{
        
        //finding x and y belongs to which block;
        x1=x;
        y1=y;
        
       // cout<<"x="<<x1<<endl;
       // cout<<"y="<<y1<<endl;
        if(x>y) // interchanging the values:putting smaller in x and larger in y
        {
            x1=y;
            y1=x;
        }
        //cout<<"x1="<<x1<<endl;
       // cout<<"y1="<<y1<<endl;
        
            
        block_x=-1;
        block_y=-1;
        for(i=0;i<(root-1);i++)
        {
            if((x1<b[i])&&(block_x==-1))
            {
                block_x=i;
                
            }
            if((x1==b[i])&&(block_x==-1))
            {
                block_x=i+1;
                
            }
            
            if((y1<b[i])&&(block_y==-1))
            {
                block_y=i;
            }
            if((y1==b[i])&&(block_y==-1))
            {
                block_y=i+1;
            }
            if(block_x!=-1&&block_y!=-1)
            break;
        }
        if(block_y==-1)
        block_y=root-1;
        if(block_x==-1)
        block_x=root-1;
        //cout<<"block_x="<<block_x<<endl;
        //cout<<"block_y="<<block_y<<endl;
        
        m_max=0;
        if(block_x==block_y)
        {
            for(i=x1;i<=y1;i++)
            {
                if(m_max<a[i])
                m_max=a[i];
            }
        }
        else
        {
        for(i=(block_x+1);i<(block_y);i++)
        {   //cout<<"i m not here";
            if(max[i]>m_max)
            {
                m_max=max[i];
            }
        }
       // cout<<"m_max="<<m_max<<endl;
        for(i=x1;i<=b[block_x];i++)
        {
            if(a[i]>m_max)
            m_max=a[i];
        }
       // cout<<"m_max="<<m_max<<endl;
        for(i=b[block_y-1];i<=y;i++)
        {	if(a[i]>m_max)
        	m_max=a[i];
        }
     --------------------------------------------------------------
        }
        }
         //cout<<"m_max="<<m_max<<endl;
       sum=sum+m_max; 
       
    }
    cout<<sum<<endl;   //output
    return 0;
    
    qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
}
